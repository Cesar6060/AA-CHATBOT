@page "/chat"
@using AAU.Services
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationService NavigationService
@rendermode InteractiveServer

<h3>Chat with AI</h3>

<div class="chat-container">
    <div class="message-container">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "bot-message")">
                @message.Text
            </div>
        }
    </div>

    <div class="input-container">
        <InputText @bind-Value="userInput" @onkeydown="HandleKeyDown" class="input-field"
            placeholder="Type your question..." />
        <button @onclick="SendMessage" class="send-button">Send</button>
    </div>
</div>

@code {
    private string userInput = string.Empty;
    private List<Message> messages = new List<Message>();

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(userInput))
        {
            messages.Add(new Message { Text = userInput, IsUser = true });
            StateHasChanged(); // Update UI after adding user message

            var botResponse = await GetBotResponse(userInput);
            messages.Add(new Message { Text = botResponse, IsUser = false });
            userInput = string.Empty;
            StateHasChanged(); // Update UI after receiving bot response
        }
    }

    private async Task<string> GetBotResponse(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return "Input is empty.";
        }

        var chatRequest = new { Prompt = input };

        try
        {
            // Use relative URL since BaseAddress is set
            var response = await Http.PostAsJsonAsync("AI", chatRequest);

            if (response.IsSuccessStatusCode)
            {
                var botResponse = await response.Content.ReadAsStringAsync();
                return botResponse;
            }
            else
            {
                Console.WriteLine($"Error: {response.ReasonPhrase}");
                return $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in GetBotResponse: {ex.Message}");
            return $"Exception: {ex.Message}";
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    private class Message
    {
        public string Text { get; set; }
        public bool IsUser { get; set; }
    }
}
