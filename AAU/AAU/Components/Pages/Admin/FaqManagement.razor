@page "/admin/faq"
@using System.Text
@using AAU.Components.Modals
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>FAQ Management</h3>
<button type="button" class="btn btn-primary" @onclick="OpenModal">Add FAQ</button>
<FAQAddModal @ref="faqModal" />

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
        <tr>
            <th>ID</th>
            <th>Question</th>
            <th>Answer</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @if (faqs != null)
        {
            @foreach (var faq in faqs)
            {
                <tr>
                    <td>@faq.id</td>
                    <td>
                        <InputTextArea @bind-Value="faq.question" Rows="4" class="w-100"/>
                    </td>
                    <td>
                        <InputTextArea @bind-Value="faq.answer" Rows="4" class="w-100"/>
                    </td>
                    <td>
                        <button @onclick="() => UpdateFAQ(faq)"class="btn btn-danger">Update FAQ</button>
                        <button @onclick="() => DeleteFAQ(faq.id)"class="btn btn-warning">Delete FAQ</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<FAQ> faqs;
    private string errorMessage;
    private FAQAddModal faqModal;


    protected override async Task OnInitializedAsync()
    {
        await LoadFaq();
    }

    private async Task LoadFaq()
    {
        try
        {
            faqs = await Http.GetFromJsonAsync<List<FAQ>>("/faq/all");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
        }
    }


    private async Task DeleteFAQ(int faqID)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            var content = new StringContent(faqID.ToString(), Encoding.UTF8, "application/json");
            var request = new HttpRequestMessage(HttpMethod.Delete, "/faq/delete")
            {
                Content = content
            };
        
            var response = await Http.SendAsync(request);
        
            if (response.IsSuccessStatusCode)
            {
                await LoadFaq(); // Reload users after deletion
            }
            else
            {
                // Log the error response content for debugging
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response: {responseContent}");
                errorMessage = "Failed to delete user.";
            }
        }
    }
    
    private void OpenModal()
    {
        faqModal.Show();
    }

    private async Task UpdateFAQ(FAQ faq)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to update this FAQ?");
        if (confirmed)
        {
            var response = await Http.PatchAsJsonAsync("/faq/update", faq);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeAsync<object>("alert", "FAQ was Updated successfully.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
            }
        }
    }
}

